{"version":3,"sources":["components/UI/Input.module.css","components/Login/Login.module.css","redux/actions/actions.js","components/UI/Input.jsx","components/Signup/Signup.jsx","components/Login/Login.jsx","redux/reducers/authReducer.js","redux/redux-store.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","URL","loginUser","userObj","type","payload","isInvalid","valid","touched","shouldValidate","Input","props","inputType","cls","classes","htmlFor","Math","random","push","invalid","className","join","label","id","value","onChange","name","checked","errorMessage","Signup","state","isFormValid","formControls","email","validation","required","password","minLength","password_confirm","radioGroup","teacher","student","validateControl","isValid","trim","is","length","handleRadio","event","object","target","setState","onHandleChange","e","controlName","control","Object","keys","forEach","registerHandler","handleSubmit","preventDefault","userPostFetch","this","map","index","key","Login","onSubmit","LoginForm","renderInputs","roleGroup","role","buttons","Button","btnSuccess","btns","variant","disabled","to","onClick","Component","connect","dispatch","userInfo","user","fetch","credentials","method","headers","Accept","body","JSON","stringify","token","username","then","resp","ok","Error","statusText","json","data","message","localStorage","setItem","catch","err","loginHandler","userLoginFetch","initialState","currentUser","authReducer","action","reducers","combineReducers","auth","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunkMiddleware","__store__","App","componentDidMount","handleClick","removeItem","logoutUser","path","render","AppContainer","withRouter","MainApp","basename","process","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.f860e1fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3rurL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__3bvtm\",\"LoginForm\":\"Login_LoginForm__3YWkk\",\"buttons\":\"Login_buttons__2ldxS\",\"btnSuccess\":\"Login_btnSuccess__z7Osr\",\"btns\":\"Login_btns__2FIuS\",\"roleGroup\":\"Login_roleGroup__3XK00\",\"role\":\"Login_role__LHwUe\"};","const URL = \"http://localhost:4000/api/\";\r\n\r\nconst loginUser = userObj => ({\r\n    type: 'LOGIN_USER',\r\n    payload: userObj\r\n})\r\n\r\nexport const logoutUser = () => ({\r\n    type: 'LOGOUT_USER'\r\n})\r\n\r\nexport const userPostFetch = user => {\r\n    return dispatch => {\r\n        return fetch(URL + 'users', {\r\n            credentials: 'include',\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                token: user.username + user.password,\r\n                username: user.username,\r\n                password: user.password,\r\n                role: user.role\r\n            })\r\n        })\r\n            .then((resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error(resp.statusText)\r\n                }\r\n                return resp;\r\n            }))\r\n            .then(resp => resp.json())\r\n            .then(data => {   // в случае успеха, data - ответ в JSON\r\n                if (data.message) {\r\n                    // logic\r\n                } else {\r\n                    localStorage.setItem(\"token\", data.token) // data.token = jwt (simple)\r\n                    dispatch(loginUser(data))\r\n                }\r\n            })\r\n            .catch(err => err)\r\n    }\r\n}\r\n\r\nexport const userLoginFetch = user => {\r\n    return dispatch => {\r\n        return fetch(URL + 'login', {\r\n            credentials: 'include',\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: user.username,\r\n                password: user.password\r\n            })\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                if (data.message) {\r\n                    //Тут прописываем логику\r\n                } else {\r\n                    localStorage.setItem(\"token\", data.token)\r\n                    dispatch(loginUser(data))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getProfileFetch = () => {\r\n    return dispatch => {\r\n        const token = localStorage.token;\r\n        if (token) {\r\n            return fetch(URL + 'auth', {\r\n                credentials: 'include',\r\n                method: \"GET\",\r\n                headers: {\r\n                    'Access-Control-Allow-Headers' : 'Version, Authorization, Content-Type',\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n\r\n                }\r\n            })\r\n                .then(resp => resp.json())\r\n                .then(data => {\r\n                    if (data.message) {\r\n                        // Будет ошибка если token не дествительный\r\n                        localStorage.removeItem(\"token\")\r\n                    } else {\r\n                        dispatch(loginUser(data))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport classes from './Input.module.css';\r\n\r\nconst isInvalid = ({valid, touched, shouldValidate}) => {\r\n    return !valid && touched && shouldValidate\r\n}\r\n\r\nconst Input = props => {\r\n\r\n    const inputType = props.type || 'text';\r\n    const cls = [classes.Input];\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    if (isInvalid(props)) {\r\n        cls.push(classes.invalid)\r\n    }\r\n\r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input type={inputType}\r\n                   id={htmlFor}\r\n                   value={props.value}\r\n                   onChange={props.onChange}\r\n                   name={props.name}\r\n                   checked={props.checked}\r\n            />\r\n\r\n            {\r\n                isInvalid(props)\r\n                    ? <span> {props.errorMessage || 'Some error'}</span>\r\n                    : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport classes from \"../Login/Login.module.css\";\r\n\r\nimport is from \"is_js\";\r\nimport {userPostFetch} from '../../redux/actions/actions';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Input from \"../UI/Input\";\r\n\r\nclass Signup extends Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Адрес электронной почты',\r\n                errorMessage: 'Введите корректный email',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Длина пароля должна быть больше 6-ти символов',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            },\r\n            password_confirm: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Повторите пароль',\r\n                errorMessage: 'Длина пароля должна быть больше 6-ти символов',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        },\r\n        radioGroup: {\r\n            teacher: true,\r\n            student: false\r\n        }\r\n    }\r\n\r\n    validateControl = (value, validation) => {\r\n        if (!validation) {\r\n            return true\r\n        }\r\n\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n\r\n        if (validation.email) {\r\n            isValid = is.email(value) && isValid;\r\n        }\r\n\r\n        if (validation.minLength) {\r\n            isValid = value.trim().length >= validation.minLength && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    handleRadio = event => {\r\n        let object = {};\r\n        object[event.target.value] = event.target.checked;\r\n\r\n        this.setState({radioGroup: object})\r\n    }\r\n\r\n    onHandleChange = (e, controlName) => {\r\n\r\n        const formControls = {...this.state.formControls}\r\n        const control = {...formControls[controlName]}\r\n\r\n        control.value = e.target.value;\r\n        control.touched = true;\r\n        control.valid = this.validateControl(control.value, control.validation);\r\n\r\n        formControls[controlName] = control;\r\n\r\n        let isFormValid = true;\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            isFormValid = formControls[name].value && isFormValid\r\n        })\r\n\r\n        this.setState({\r\n            formControls,\r\n            isFormValid\r\n        })\r\n        //console.log(e.target.value)\r\n    }\r\n\r\n    registerHandler = () => {\r\n\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.props.userPostFetch(this.state)\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName]\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    touched={control.touched}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={e => this.onHandleChange(e, controlName)}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Login}>\r\n                <div>\r\n                    <h1>Регистрация</h1>\r\n                    <form onSubmit={this.handleSubmit} className={classes.LoginForm}>\r\n                        {\r\n                            this.renderInputs()\r\n                        }\r\n\r\n                        <div className={`${classes.roleGroup}`}>\r\n                            <h2>Выберите роль</h2>\r\n\r\n                            <div className={classes.role}>\r\n                                <Input type={'radio'}\r\n                                       label={'Преподаватель'}\r\n                                       value={'teacher'}\r\n                                       name={'role'}\r\n                                       checked={this.state.radioGroup.teacher}\r\n                                       onChange={this.handleRadio}/>\r\n                                <Input type={'radio'}\r\n                                       label={'Студент'}\r\n                                       value={'student'}\r\n                                       name={'role'}\r\n                                       checked={this.state.radioGroup.student}\r\n                                       onChange={this.handleRadio}/>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <hr/>\r\n                        <div className={classes.buttons}>\r\n                            <Button className={`${classes.btnSuccess} ${classes.btns}`}\r\n                                    variant='success'\r\n                                    disabled={!this.state.isFormValid}\r\n                                    type={'submit'}>Зарегистрироваться</Button>\r\n\r\n                            <Link to={'/login'}>\r\n                                <Button\r\n                                    className={`${classes.btns}`}\r\n                                    variant='primary'\r\n                                    onClick={this.registerHandler}\r\n                                >Авторизоваться</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    userPostFetch: userInfo => dispatch(userPostFetch(userInfo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Signup);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport classes from './Login.module.css';\r\n\r\nimport is from 'is_js';\r\nimport {userLoginFetch} from '../../redux/actions/actions';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Input from \"../UI/Input\";\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Адрес электронной почты',\r\n                errorMessage: 'Введите корректный email',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Длина пароля должна быть больше 6-ти символов',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    validateControl = (value, validation) => {\r\n        if (!validation) {\r\n            return true\r\n        }\r\n\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n\r\n        if (validation.email) {\r\n            isValid = is.email(value) && isValid;\r\n        }\r\n\r\n        if (validation.minLength) {\r\n            isValid = value.trim().length >= validation.minLength && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onHandleChange = (e, controlName) => {\r\n        //     this.setState({\r\n        //         [e.target.name]: e.target.value\r\n        // });\r\n        const formControls = {...this.state.formControls}\r\n        const control = {...formControls[controlName]}\r\n\r\n        control.value = e.target.value;\r\n        control.touched = true;\r\n        control.valid = this.validateControl(control.value, control.validation);\r\n\r\n        formControls[controlName] = control;\r\n\r\n        let isFormValid = true;\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            isFormValid = formControls[name].value && isFormValid\r\n        })\r\n\r\n        this.setState({\r\n            formControls,\r\n            isFormValid\r\n        })\r\n        //console.log(e.target.value)\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        //this.props.userLoginFetch(this.state)\r\n    }\r\n\r\n    loginHandler = () => {\r\n\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName]\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    touched={control.touched}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={e => this.onHandleChange(e, controlName)}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Login}>\r\n                <div>\r\n                    <h1>Авторизация</h1>\r\n                    <form onSubmit={this.handleSubmit} className={classes.LoginForm}>\r\n                        {\r\n                            this.renderInputs()\r\n                        }\r\n                        <div className={classes.buttons}>\r\n                            <Button className={`${classes.btnSuccess} ${classes.btns}`}\r\n                                    variant='primary'\r\n                                    onClick={this.loginHandler}\r\n                                    disabled={!this.state.isFormValid}\r\n                            type={'submit'}>Войти</Button>\r\n\r\n                            <Link to={'/signup'}>\r\n                                <Button\r\n                                    className={`${classes.btns}`}\r\n                                    variant='success'\r\n                                >Зарегистрироваться</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    userLoginFetch: userInfo => dispatch(userLoginFetch(userInfo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);","const initialState = {\r\n    currentUser: {}\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN_USER':\r\n            return {...state, currentUser: action.payload}\r\n        case 'LOGOUT_USER':\r\n            return {...state, currentUser: {}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer\r\n});\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nconst store = createStore(reducers, compose(\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport {Switch, Route, BrowserRouter, withRouter, Redirect, HashRouter} from 'react-router-dom';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {getProfileFetch, logoutUser} from './redux/actions/actions';\r\nimport Signup from './components/Signup/Signup';\r\nimport Login from './components/Login/Login';\r\nimport store from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\nclass App extends Component {\r\n    componentDidMount = () => {\r\n        //this.props.getProfileFetch()\r\n    }\r\n\r\n    handleClick = event => {\r\n        event.preventDefault()\r\n        localStorage.removeItem(\"token\")\r\n        this.props.logoutUser()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>React Application</h1>\r\n                <Switch>\r\n                    <Route path=\"/signup\"\r\n                           render={() => <Signup/>}/>\r\n                    <Route path=\"/login\"\r\n                           render={() => <Login/>}/>\r\n                </Switch>\r\n                {\r\n                    this.props.currentUser.username\r\n                    ? <button onClick={this.handleClick}>Log Out</button>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentUser: state.auth.currentUser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    //getProfileFetch: () => dispatch(getProfileFetch()),\r\n    logoutUser: () => dispatch(logoutUser())\r\n})\r\n\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps , mapDispatchToProps))(App);\r\n\r\nconst MainApp = (props) => {\r\n    return <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Button/Button.jsx","components/BlockAuth/BlockAuth.jsx","components/RegisterForm/RegisterForm.jsx","components/LoginForm/LoginForm.jsx","pages/Auth/Auth.jsx","redux/reducers/authReducer.js","redux/redux-store.js","pages/Home/Home.jsx","App.jsx","redux/actions/actions.js","serviceWorker.js","index.js"],"names":["Button","props","className","classNames","BlockAuth","children","formItemLayout","labelCol","xs","span","sm","wrapperCol","success","RegisterForm","Form","useForm","form","InfoCircleTwoTone","style","fontSize","color","name","onFinish","values","console","log","initialValues","prefix","scrollToFirstError","Item","rules","type","message","required","placeholder","MailOutlined","size","hasFeedback","Password","LockOutlined","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","whitespace","UserOutlined","htmlType","to","LoginForm","remember","React","Component","Auth","exact","path","render","initialState","currentUser","authReducer","state","action","payload","reducers","combineReducers","auth","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunkMiddleware","__store__","Home","App","componentDidMount","handleClick","event","preventDefault","localStorage","removeItem","logoutUser","this","username","onClick","AppContainer","withRouter","connect","dispatch","MainApp","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oaAOeA,EAFA,SAACC,GAAD,OAAW,kBAAC,IAAD,iBAAgBA,EAAhB,CAAuBC,UAAWC,IAAW,SAAUF,EAAMC,e,oCCQxEE,G,OARG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUH,EAAe,EAAfA,UAC1B,OACI,yBAAKA,UAAWC,IAAW,QAASD,IAC/BG,K,kBCMPC,EAAiB,CACnBC,SAAU,CACNC,GAAI,CAACC,KAAM,IACXC,GAAI,CAACD,KAAM,IAEfE,WAAY,CACRH,GAAI,CAACC,KAAM,IACXC,GAAI,CAACD,KAAM,MAIZG,IAAW,GAAXA,QA0GQC,EAxGM,SAAAZ,GAAU,IAAD,EAEXa,IAAKC,UAAbC,EAFmB,oBAO1B,OACI,6BACI,yBAAKd,UAAU,aACX,kGACA,2KAEJ,kBAAC,EAAD,KACMU,EA6EE,yBAAKV,UAAU,uBACX,6BACI,kBAACe,EAAA,EAAD,CAAmBC,MAAO,CAACC,SAAU,OAAQC,MAAO,WAExD,gKACA,6IAjFA,kBAAC,IAAD,iBAAUd,EAAV,CACMU,KAAMA,EACNK,KAAK,WACLC,SAfT,SAAAC,GACbC,QAAQC,IAAI,4BAA6BF,IAenBG,cAAe,CACXC,OAAQ,MAEZC,oBAAkB,IAEpB,kBAAC,IAAKC,KAAN,CAAWR,KAAK,QACLS,MAAO,CACH,CACIC,KAAM,QACNC,QAAS,mHAEb,CACIC,UAAU,EACVD,QAAS,gPAGxB,kBAAC,IAAD,CAAOE,YAAY,mIACZP,OAAQ,kBAACQ,EAAA,EAAD,CAAcjC,UAAU,wBAChCkC,KAAK,WAGhB,kBAAC,IAAKP,KAAN,CAAWR,KAAK,WACLS,MAAO,CACH,CACIG,UAAU,EACVD,QAAS,mJAGjBK,aAAW,GAClB,kBAAC,IAAMC,SAAP,CAAgBJ,YAAY,uCACZP,OAAQ,kBAACY,EAAA,EAAD,CAAcrC,UAAU,wBAChCkC,KAAK,WAGzB,kBAAC,IAAKP,KAAN,CAAWR,KAAK,UACLmB,aAAc,CAAC,YACfH,aAAW,EACXP,MAAO,CACH,CACIG,UAAU,EACVD,QAAS,8JAEb,gBAAES,EAAF,EAAEA,cAAF,MAAsB,CAClBC,UADkB,SACRC,EAAMC,GACZ,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OAAO,6GAFXD,QAAQE,eAKtC,kBAAC,IAAMT,SAAP,CAAgBJ,YAAY,8FACZP,OAAQ,kBAACY,EAAA,EAAD,CAAcrC,UAAU,wBAChCkC,KAAK,WAGzB,kBAAC,IAAKP,KAAN,CAAWR,KAAK,WACLS,MAAO,CAAC,CACJG,UAAU,EACVD,QAAS,wMACTgB,YAAY,KAEvB,kBAAC,IAAD,CAAOd,YAAY,8FACZP,OAAQ,kBAACsB,EAAA,EAAD,CAAc/C,UAAU,wBAChCkC,KAAK,WAEhB,kBAAC,EAAD,CAAQL,KAAK,UAAUmB,SAAS,SAAShD,UAAU,qBAAnD,gHAGA,kBAAC,IAAD,CAAMA,UAAU,sBAAsBiD,GAAI,UAA1C,wFC1GtB7B,EAAW,SAAAC,GACbC,QAAQC,IAAI,4BAA6BF,IAmD9B6B,E,iLA9CP,OACI,6BACI,yBAAKlD,UAAU,aACX,kGACA,4HAEJ,kBAAC,EAAD,KACI,kBAAC,IAAD,CACImB,KAAK,eACLnB,UAAU,aACVwB,cAAe,CAAC2B,UAAU,GAC1B/B,SAAUA,GAEV,kBAAC,IAAKO,KAAN,CACIR,KAAK,WACLS,MAAO,CAAC,CAACG,UAAU,EAAMD,QAAS,2MAElC,kBAAC,IAAD,CACII,KAAK,QACLT,OAAQ,kBAACsB,EAAA,EAAD,CAAc/C,UAAU,wBAChCgC,YAAY,iGAEpB,kBAAC,IAAKL,KAAN,CACIR,KAAK,WACLS,MAAO,CAAC,CAACG,UAAU,EAAMD,QAAS,oJAClC,kBAAC,IAAD,CACIL,OAAQ,kBAACY,EAAA,EAAD,CAAcrC,UAAU,wBAChC6B,KAAK,WACLG,YAAY,uCACZE,KAAK,WAIb,kBAAC,IAAKP,KAAN,KACI,kBAAC,EAAD,CAAQE,KAAK,UAAUmB,SAAS,SAAShD,UAAU,oBAAoBkC,KAAK,SAA5E,qFAIJ,kBAAC,IAAD,CAAMlC,UAAU,sBAAsBiD,GAAI,WAA1C,uH,GAxCAG,IAAMC,WCOfC,EAXF,WACT,OACI,6BAAStD,UAAW,QAChB,yBAAKA,UAAW,iBACZ,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAM,CAAC,IAAK,UAAWC,OAAQ,kBAAM,kBAAC,EAAD,SAClD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,Y,gBCbpDC,EAAe,CACjBC,YAAa,IAcFC,EAXK,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAClD,OAAQA,EAAOjC,MACX,IAAK,aACD,OAAO,eAAIgC,EAAX,CAAkBF,YAAaG,EAAOC,UAC1C,IAAK,cACD,OAAO,eAAIF,EAAX,CAAkBF,YAAa,KACnC,QACI,OAAOE,I,SCPbG,EAAWC,YAAgB,CAC7BC,KAAMN,IAMJO,EAAQC,YAAYJ,EAAUK,YAChCC,OAAOC,8BAAgCD,OAAOC,+BAC9CC,YAAgBC,OAGpBH,OAAOI,UAAYP,EAEJA,QCLAQ,G,OARF,WACT,OACI,6BAAS3E,UAAW,QACjB,8CCEL4E,E,2MACFC,kBAAoB,a,EAIpBC,YAAc,SAAAC,GACVA,EAAMC,iBACNC,aAAaC,WAAW,SACxB,EAAKnF,MAAMoF,c,wEAIX,OACI,yBAAKnF,UAAW,WACZ,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAM,CAAC,IAAK,SAAU,WAAYC,OAAQ,kBAAM,kBAAC,EAAD,SAC7D,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,MAAMC,OAAQ,kBAAM,kBAAC,EAAD,SAElC2B,KAAKrF,MAAM4D,YAAY0B,SACrB,4BAAQC,QAASF,KAAKN,aAAtB,WACA,U,GAnBJzB,aAoCdkC,EAAelB,YACfmB,IACAC,aAZoB,SAAA5B,GAAK,MAAK,CAC9BF,YAAaE,EAAMK,KAAKP,gBAGD,SAAA+B,GAAQ,MAAK,CAEpCP,WAAY,kBAAMO,ECnCW,CAC7B7D,KAAM,qBDsCSwC,CAEgCO,GAUpCe,EARC,SAAC5F,GACb,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAUoE,MAAOA,GACb,kBAACoB,EAAD,SEzCQK,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCXNC,IAASvC,OAAO,kBAAC,EAAD,MAAYwC,SAASC,eAAe,SD4H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAM5E,c","file":"static/js/main.b381a674.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button as BaseButton} from \"antd\";\r\nimport './Button.css';\r\nimport classNames from 'classnames';\r\n\r\nconst Button = (props) => <BaseButton {...props} className={classNames('button', props.className)} />\r\n\r\nexport default Button;","import React from \"react\";\r\nimport classNames from 'classnames';\r\n\r\nimport \"./BlockAuth.scss\"\r\n\r\nconst BlockAuth = ({children, className}) => {\r\n    return (\r\n        <div className={classNames('block', className)}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlockAuth;","import React from 'react';\r\n\r\nimport {Link} from 'react-router-dom'\r\nimport Button from \"../Button/Button\";\r\nimport {InfoCircleTwoTone, LockOutlined, UserOutlined, MailOutlined} from '@ant-design/icons';\r\n\r\nimport BlockAuth from \"../BlockAuth/BlockAuth\";\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 8},\r\n    },\r\n    wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 30},\r\n    },\r\n};\r\n\r\nconst {success} = false;\r\n\r\nconst RegisterForm = props => {\r\n\r\n    const [form] = Form.useForm();\r\n    const onFinish = values => {\r\n        console.log('Received values of form: ', values);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"auth__top\">\r\n                <h2>Регистрация</h2>\r\n                <p>Моментальная регистрация</p>\r\n            </div>\r\n            <BlockAuth>\r\n                {!success ? (\r\n                        <Form {...formItemLayout}\r\n                              form={form}\r\n                              name=\"register\"\r\n                              onFinish={onFinish}\r\n                              initialValues={{\r\n                                  prefix: '86',\r\n                              }}\r\n                              scrollToFirstError>\r\n\r\n                            <Form.Item name=\"email\"\r\n                                       rules={[\r\n                                           {\r\n                                               type: 'email',\r\n                                               message: 'Некорректный адрес E-mail!',\r\n                                           },\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, введите адрес электронной почты!',\r\n                                           },\r\n                                       ]}>\r\n                                <Input placeholder=\"Адрес электронной почты\"\r\n                                       prefix={<MailOutlined className=\"site-form-item-icon\"/>}\r\n                                       size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"password\"\r\n                                       rules={[\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, введите пароль!',\r\n                                           },\r\n                                       ]}\r\n                                       hasFeedback>\r\n                                <Input.Password placeholder='Пароль'\r\n                                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                                size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"confirm\"\r\n                                       dependencies={['password']}\r\n                                       hasFeedback\r\n                                       rules={[\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, повторите пароль!',\r\n                                           },\r\n                                           ({getFieldValue}) => ({\r\n                                               validator(rule, value) {\r\n                                                   if (!value || getFieldValue('password') === value) {\r\n                                                       return Promise.resolve();\r\n                                                   }\r\n                                                   return Promise.reject('Пароли не совпадают!');\r\n                                               },\r\n                                           })]}>\r\n                                <Input.Password placeholder='Повторите пароль'\r\n                                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                                size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"nickname\"\r\n                                       rules={[{\r\n                                           required: true,\r\n                                           message: 'Пожалуйста, введите имя пользователя!',\r\n                                           whitespace: true\r\n                                       }]}>\r\n                                <Input placeholder='Имя пользователя'\r\n                                       prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                       size=\"large\"/>\r\n                            </Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className='login-form-button'>\r\n                                Зарегистрироваться\r\n                            </Button>\r\n                            <Link className=\"auth__register-link\" to={'/login'}>Войти в аккаунт</Link>\r\n                        </Form>\r\n                    )\r\n                    :\r\n                    <div className='auth__confirm-block'>\r\n                        <div>\r\n                            <InfoCircleTwoTone style={{fontSize: '50px', color: '#08c'}}/>\r\n                        </div>\r\n                        <h3> Подтверждение аккаунта</h3>\r\n                        <p>На почту или еще куда...</p>\r\n                    </div>\r\n                }\r\n            </BlockAuth>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;\r\n\r\n","import React from 'react';\r\nimport {Form, Input} from \"antd\";\r\nimport {Link} from 'react-router-dom'\r\nimport Button from \"../Button/Button\";\r\nimport {UserOutlined, LockOutlined} from '@ant-design/icons';\r\nimport BlockAuth from \"../BlockAuth/BlockAuth\";\r\n\r\n\r\nconst onFinish = values => {\r\n    console.log('Received values of form: ', values);\r\n};\r\n\r\nclass LoginForm extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"auth__top\">\r\n                    <h2>Авторизация</h2>\r\n                    <p>Войдите в аккаунт</p>\r\n                </div>\r\n                <BlockAuth>\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        className=\"login-form\"\r\n                        initialValues={{remember: true}}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[{required: true, message: 'Пожалуйста, введите имя пользователя!'}]}\r\n                        >\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                placeholder=\"Имя пользователя\"/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[{required: true, message: 'Пожалуйста, введите пароль!'}]}>\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                type=\"password\"\r\n                                placeholder=\"Пароль\"\r\n                                size=\"large\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" size='large'>\r\n                                Войти в аккаунт\r\n                            </Button>\r\n                        </Form.Item>\r\n                        <Link className=\"auth__register-link\" to={'/signup'}>Зарегистрироваться</Link>\r\n                    </Form>\r\n                </BlockAuth>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport './Auth.scss';\r\nimport {Route} from \"react-router-dom\";\r\n\r\nimport RegisterForm from \"../../components/RegisterForm/RegisterForm\";\r\nimport LoginForm from \"../../components/LoginForm/LoginForm\";\r\n\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <section className={'auth'}>\r\n            <div className={'auth__content'}>\r\n                <Route exact path={[\"/\", \"/login\"]} render={() => <LoginForm/>}/>\r\n                <Route exact path=\"/signup\" render={() => <RegisterForm/>}/>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Auth;","const initialState = {\r\n    currentUser: {}\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN_USER':\r\n            return {...state, currentUser: action.payload}\r\n        case 'LOGOUT_USER':\r\n            return {...state, currentUser: {}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer\r\n});\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nconst store = createStore(reducers, compose(\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport {Route} from \"react-router-dom\";\r\n\r\nimport './Home.scss';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <section className={'home'}>\r\n           <h1>Hello world</h1>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport {Switch, Route, BrowserRouter, withRouter, Redirect, HashRouter} from 'react-router-dom';\r\nimport {connect, Provider} from 'react-redux';\r\n\r\nimport {getProfileFetch, logoutUser} from './redux/actions/actions';\r\nimport Auth from './pages/Auth/Auth';\r\nimport store from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport Home from \"./pages/Home/Home\";\r\n\r\nclass App extends Component {\r\n    componentDidMount = () => {\r\n        //this.props.getProfileFetch()\r\n    }\r\n\r\n    handleClick = event => {\r\n        event.preventDefault()\r\n        localStorage.removeItem(\"token\")\r\n        this.props.logoutUser()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'wrapper'}>\r\n                <Route exact path={[\"/\", \"/login\", \"/signup\"]} render={() => <Auth/>}/>\r\n                <Route exact path=\"/im\" render={() => <Home/>}/>\r\n                {\r\n                    this.props.currentUser.username\r\n                    ? <button onClick={this.handleClick}>Log Out</button>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentUser: state.auth.currentUser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    //getProfileFetch: () => dispatch(getProfileFetch()),\r\n    logoutUser: () => dispatch(logoutUser())\r\n})\r\n\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps , mapDispatchToProps))(App);\r\n\r\nconst MainApp = (props) => {\r\n    return <BrowserRouter >\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default MainApp;\r\n","const URL = \"http://localhost:4000/api/\";\r\n\r\nconst loginUser = userObj => ({\r\n    type: 'LOGIN_USER',\r\n    payload: userObj\r\n})\r\n\r\nexport const logoutUser = () => ({\r\n    type: 'LOGOUT_USER'\r\n})\r\n\r\nexport const userPostFetch = user => {\r\n    return dispatch => {\r\n        return fetch(URL + 'users', {\r\n            credentials: 'include',\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                token: user.username + user.password,\r\n                username: user.username,\r\n                password: user.password,\r\n                role: user.role\r\n            })\r\n        })\r\n            .then((resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error(resp.statusText)\r\n                }\r\n                return resp;\r\n            }))\r\n            .then(resp => resp.json())\r\n            .then(data => {   // в случае успеха, data - ответ в JSON\r\n                if (data.message) {\r\n                    // logic\r\n                } else {\r\n                    localStorage.setItem(\"token\", data.token) // data.token = jwt (simple)\r\n                    dispatch(loginUser(data))\r\n                }\r\n            })\r\n            .catch(err => err)\r\n    }\r\n}\r\n\r\nexport const userLoginFetch = user => {\r\n    return dispatch => {\r\n        return fetch(URL + 'login', {\r\n            credentials: 'include',\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: user.username,\r\n                password: user.password\r\n            })\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                if (data.message) {\r\n                    //Тут прописываем логику\r\n                } else {\r\n                    localStorage.setItem(\"token\", data.token)\r\n                    dispatch(loginUser(data))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getProfileFetch = () => {\r\n    return dispatch => {\r\n        const token = localStorage.token;\r\n        if (token) {\r\n            return fetch(URL + 'auth', {\r\n                credentials: 'include',\r\n                method: \"GET\",\r\n                headers: {\r\n                    'Access-Control-Allow-Headers' : 'Version, Authorization, Content-Type',\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n\r\n                }\r\n            })\r\n                .then(resp => resp.json())\r\n                .then(data => {\r\n                    if (data.message) {\r\n                        // Будет ошибка если token не дествительный\r\n                        localStorage.removeItem(\"token\")\r\n                    } else {\r\n                        dispatch(loginUser(data))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/UI/Input/Input.module.scss","redux/reducers/authReducer.js","redux/redux-store.js","components/Button/Button.jsx","components/BlockAuth/BlockAuth.jsx","components/RegisterForm/RegisterForm.jsx","components/LoginForm/LoginForm.jsx","pages/Auth/Auth.jsx","pages/Home/Home.jsx","components/UI/Input/Input.jsx","components/UI/SelectComponent/SelectComponent.jsx","form/formFramework.jsx","containers/QuizCreator/QuizCreator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","initialState","currentUser","authReducer","state","action","type","payload","reducers","combineReducers","auth","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunkMiddleware","__store__","Button","props","className","classNames","BlockAuth","children","formItemLayout","labelCol","xs","span","sm","wrapperCol","RegisterForm","useState","success","setSuccess","Form","useForm","form","InfoCircleTwoTone","style","fontSize","color","name","onFinish","values","console","log","initialValues","prefix","scrollToFirstError","Item","rules","message","required","placeholder","MailOutlined","size","hasFeedback","Password","LockOutlined","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","whitespace","UserOutlined","htmlType","to","LoginForm","remember","React","Component","Auth","exact","path","render","Home","isInvalid","valid","touched","shouldValidate","Input","inputType","cls","classes","htmlFor","Math","random","push","invalid","join","label","id","onChange","checked","errorMessage","Option","Select","SelectComponent","defaultValue","options","map","option","index","key","text","createControl","config","validation","validate","isValid","trim","validateForm","formControls","isFormValid","control","hasOwnProperty","createOptionControl","number","createFormControls","question","option1","option2","option3","option4","QuizCreator","quiz","rightAnswerId","submitHandler","event","preventDefault","addQuestionHandler","concat","length","questionItem","answers","setState","createQuizHandler","changeHandler","controlName","renderControls","Object","keys","Fragment","target","selectChangeHandler","select","this","width","onSubmit","onClick","disabled","App","componentDidMount","handleClick","localStorage","removeItem","logoutUser","AppContainer","withRouter","connect","dispatch","MainApp","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dfe011a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Z2hau\"};","const initialState = {\r\n    currentUser: {}\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN_USER':\r\n            return {...state, currentUser: action.payload}\r\n        case 'LOGOUT_USER':\r\n            return {...state, currentUser: {}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer\r\n});\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nconst store = createStore(reducers, compose(\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Button as BaseButton} from \"antd\";\r\nimport './Button.css';\r\nimport classNames from 'classnames';\r\n\r\nconst Button = (props) => <BaseButton {...props} className={classNames('button', props.className)} />\r\n\r\nexport default Button;","import React from \"react\";\r\nimport classNames from 'classnames';\r\n\r\nimport \"./BlockAuth.scss\"\r\n\r\nconst BlockAuth = ({children, className}) => {\r\n    return (\r\n        <div className={classNames('block', className)}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlockAuth;","import React, {useState} from 'react';\r\n\r\nimport {Link} from 'react-router-dom'\r\nimport Button from \"../Button/Button\";\r\nimport {InfoCircleTwoTone, LockOutlined, UserOutlined, MailOutlined} from '@ant-design/icons';\r\n\r\nimport BlockAuth from \"../BlockAuth/BlockAuth\";\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 8},\r\n    },\r\n    wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 30},\r\n    },\r\n};\r\n\r\nconst RegisterForm = props => {\r\n\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n    const onFinish = values => {\r\n        console.log('Received values of form: ', values);\r\n        setSuccess(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"auth__top\">\r\n                <h2>Регистрация</h2>\r\n                <p>Моментальная регистрация</p>\r\n            </div>\r\n            <BlockAuth>\r\n                {!success ? (\r\n                        <Form {...formItemLayout}\r\n                              form={form}\r\n                              name=\"register\"\r\n                              onFinish={onFinish}\r\n                              initialValues={{\r\n                                  prefix: '86',\r\n                              }}\r\n                              scrollToFirstError>\r\n\r\n                            <Form.Item name=\"email\"\r\n                                       rules={[\r\n                                           {\r\n                                               type: 'email',\r\n                                               message: 'Некорректный адрес E-mail!',\r\n                                           },\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, введите адрес электронной почты!',\r\n                                           },\r\n                                       ]}>\r\n                                <Input placeholder=\"Адрес электронной почты\"\r\n                                       prefix={<MailOutlined className=\"site-form-item-icon\"/>}\r\n                                       size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"password\"\r\n                                       rules={[\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, введите пароль!',\r\n                                           },\r\n                                       ]}\r\n                                       hasFeedback>\r\n                                <Input.Password placeholder='Пароль'\r\n                                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                                size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"confirm\"\r\n                                       dependencies={['password']}\r\n                                       hasFeedback\r\n                                       rules={[\r\n                                           {\r\n                                               required: true,\r\n                                               message: 'Пожалуйста, повторите пароль!',\r\n                                           },\r\n                                           ({getFieldValue}) => ({\r\n                                               validator(rule, value) {\r\n                                                   if (!value || getFieldValue('password') === value) {\r\n                                                       return Promise.resolve();\r\n                                                   }\r\n                                                   return Promise.reject('Пароли не совпадают!');\r\n                                               },\r\n                                           })]}>\r\n                                <Input.Password placeholder='Повторите пароль'\r\n                                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                                size=\"large\"/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"nickname\"\r\n                                       rules={[{\r\n                                           required: true,\r\n                                           message: 'Пожалуйста, введите имя пользователя!',\r\n                                           whitespace: true\r\n                                       }]}>\r\n                                <Input placeholder='Имя пользователя'\r\n                                       prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                       size=\"large\"/>\r\n                            </Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className='login-form-button'>\r\n                                Зарегистрироваться\r\n                            </Button>\r\n                            <Link className=\"auth__register-link\" to={'/login'}>Войти в аккаунт</Link>\r\n                        </Form>\r\n                    )\r\n                    :\r\n                    <div className='auth__confirm-block'>\r\n                        <div>\r\n                            <InfoCircleTwoTone style={{fontSize: '50px', color: '#08c'}}/>\r\n                        </div>\r\n                        <h3> Подтверждение аккаунта</h3>\r\n                        <p>На почту или еще куда...</p>\r\n                    </div>\r\n                }\r\n            </BlockAuth>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;\r\n\r\n","import React from 'react';\r\nimport {Form, Input} from \"antd\";\r\nimport {Link} from 'react-router-dom'\r\nimport Button from \"../Button/Button\";\r\nimport {UserOutlined, LockOutlined} from '@ant-design/icons';\r\nimport BlockAuth from \"../BlockAuth/BlockAuth\";\r\n\r\n\r\nconst onFinish = values => {\r\n    console.log('Received values of form: ', values);\r\n};\r\n\r\nclass LoginForm extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"auth__top\">\r\n                    <h2>Авторизация</h2>\r\n                    <p>Войдите в аккаунт</p>\r\n                </div>\r\n                <BlockAuth>\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        className=\"login-form\"\r\n                        initialValues={{remember: true}}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[{required: true, message: 'Пожалуйста, введите имя пользователя!'}]}\r\n                        >\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                placeholder=\"Имя пользователя\"/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[{required: true, message: 'Пожалуйста, введите пароль!'}]}>\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                type=\"password\"\r\n                                placeholder=\"Пароль\"\r\n                                size=\"large\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" size='large'>\r\n                                Войти в аккаунт\r\n                            </Button>\r\n                        </Form.Item>\r\n                        <Link className=\"auth__register-link\" to={'/signup'}>Зарегистрироваться</Link>\r\n                    </Form>\r\n                </BlockAuth>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport './Auth.scss';\r\nimport {Route} from \"react-router-dom\";\r\n\r\nimport RegisterForm from \"../../components/RegisterForm/RegisterForm\";\r\nimport LoginForm from \"../../components/LoginForm/LoginForm\";\r\n\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <section className={'auth'}>\r\n            <div className={'auth__content'}>\r\n                <Route exact path={[\"/\", \"/login\"]} render={() => <LoginForm/>}/>\r\n                <Route exact path=\"/signup\" render={() => <RegisterForm/>}/>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React from 'react';\r\n\r\nimport './Home.scss';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <section className={'home'}>\r\n           <h1>Hello world</h1>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport classes from './Input.module.scss';\r\n\r\nconst isInvalid = ({valid, touched, shouldValidate}) => {\r\n    return !valid && touched && shouldValidate\r\n}\r\n\r\nconst Input = props => {\r\n\r\n    const inputType = props.type || 'text';\r\n    const cls = [classes.Input];\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    if (isInvalid(props)) {\r\n        cls.push(classes.invalid)\r\n    }\r\n\r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input type={inputType}\r\n                   id={htmlFor}\r\n                   value={props.value}\r\n                   onChange={props.onChange}\r\n                   name={props.name}\r\n                   checked={props.checked}\r\n            />\r\n\r\n            {\r\n                isInvalid(props)\r\n                    ? <span> {props.errorMessage || 'Some error'}</span>\r\n                    : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './SelectComponent.scss'\r\n\r\nimport { Select } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst SelectComponent = props => {\r\n\r\n    const htmlFor = `${props.label}-${Math.random()}`\r\n\r\n    return (\r\n        <div className='Select'>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <Select\r\n                id={htmlFor}\r\n                defaultValue={props.value}\r\n                onChange={props.onChange}\r\n                style={props.style}>\r\n                {props.options.map((option, index) => {\r\n                    return (\r\n                        <Option\r\n                            value={option.value}\r\n                            key={option.value + index}>\r\n                            {option.text}\r\n                        </Option>\r\n                    )\r\n                })}\r\n            </Select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectComponent;","export const createControl = (config, validation) => {\r\n    return {\r\n        ...config,\r\n        validation,\r\n        valid: !validation,\r\n        touched: false,\r\n        value: ''\r\n    }\r\n}\r\n\r\nexport const validate = (value, validation = null) => {\r\n    if (!validation) {\r\n        return true\r\n    }\r\n\r\n    let isValid = true\r\n\r\n    if (validation.required) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n\r\n    return isValid\r\n}\r\n\r\nexport const validateForm = (formControls) => {\r\n    let isFormValid = true\r\n\r\n    for (let control in formControls) {\r\n        if (formControls.hasOwnProperty(control)) {\r\n            isFormValid = formControls[control].valid && isFormValid\r\n        }\r\n    }\r\n\r\n    return isFormValid\r\n}","import React from 'react';\r\n\r\nimport './QuizCreator.scss';\r\nimport BlockAuth from '../../components/BlockAuth/BlockAuth';\r\nimport Button from '../../components/Button/Button';\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport SelectComponent from \"../../components/UI/SelectComponent/SelectComponent\";\r\n\r\nimport {createControl, validate, validateForm} from '../../form/formFramework';\r\n\r\nconst createOptionControl = (number) => {\r\n    return createControl({\r\n            label: `Вариант ${number}`,\r\n            errorMessage: 'Значение не может быть пустым!',\r\n            id: number\r\n        }, {required: true}\r\n    )\r\n}\r\n\r\nconst createFormControls = () => {\r\n    return {\r\n        question: createControl({\r\n            label: 'Введите вопрос',\r\n            errorMessage: 'Вопрос не может быть пустым!'\r\n        }, {required: true}),\r\n        option1: createOptionControl(1),\r\n        option2: createOptionControl(2),\r\n        option3: createOptionControl(3),\r\n        option4: createOptionControl(4)\r\n    }\r\n}\r\n\r\nclass QuizCreator extends React.Component {\r\n\r\n    state = {\r\n        quiz: [],\r\n        formControls: createFormControls(),\r\n        rightAnswerId: 1,\r\n        isFormValid: false\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    addQuestionHandler = event => {\r\n        event.preventDefault();\r\n        const quiz = this.state.quiz.concat()\r\n        const index = quiz.length + 1\r\n        const {question, option1, option2, option3, option4} = this.state.formControls\r\n\r\n        const questionItem = {\r\n            question: question.value,\r\n            id: index,\r\n            rightAnswerId: this.state.rightAnswerId,\r\n            answers: [\r\n                {text: option1.value, id: option1.id},\r\n                {text: option2.value, id: option2.id},\r\n                {text: option3.value, id: option3.id},\r\n                {text: option4.value, id: option4.id},\r\n            ]\r\n        }\r\n\r\n        quiz.push(questionItem)\r\n\r\n        this.setState({\r\n            quiz,\r\n            formControls: createFormControls(),\r\n            rightAnswerId: 1,\r\n            isFormValid: false\r\n        })\r\n    }\r\n\r\n    createQuizHandler = event => {\r\n        event.preventDefault()\r\n        console.log(this.state.quiz)\r\n        //TODO: SERVER\r\n    }\r\n\r\n    changeHandler = (value, controlName) => {\r\n        const formControls = {...this.state.formControls}\r\n        const control = {...formControls[controlName]}\r\n\r\n        control.touched = true\r\n        control.value = value\r\n        control.valid = validate(control.value, control.validation)\r\n\r\n        formControls[controlName] = control\r\n\r\n        this.setState({\r\n            formControls,\r\n            isFormValid: validateForm(formControls)\r\n        })\r\n    }\r\n\r\n    renderControls = () => {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName]\r\n\r\n            return (\r\n                <React.Fragment key={controlName + index}>\r\n                    <Input\r\n                        label={control.label}\r\n                        value={control.value}\r\n                        valid={control.valid}\r\n                        shouldValidate={!!control.validation}\r\n                        touched={control.touched}\r\n                        errorMessage={control.errorMessage}\r\n                        onChange={event => this.changeHandler(event.target.value, controlName)}\r\n                    />\r\n                    {index === 0 ? <hr/> : null}\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    selectChangeHandler = event => {\r\n\r\n        this.setState({\r\n            rightAnswerId: (+event)\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const select = <SelectComponent\r\n            label='Укажите правильный ответ на вопрос'\r\n            value={this.state.rightAnswerId}\r\n            onChange={this.selectChangeHandler}\r\n            options={[\r\n                {text: 'Вариант 1', value: 1},\r\n                {text: 'Вариант 2', value: 2},\r\n                {text: 'Вариант 3', value: 3},\r\n                {text: 'Вариант 4', value: 4},\r\n            ]}\r\n            style={{width: 270}}\r\n        />\r\n\r\n        return (\r\n            <div className='QuizCreator'>\r\n                <div>\r\n                    <h1>Создание теста</h1>\r\n                    <BlockAuth>\r\n                        <form onSubmit={this.submitHandler}>\r\n\r\n                            {\r\n                                this.renderControls()\r\n                            }\r\n                            {\r\n                                select\r\n                            }\r\n\r\n                            <div className='container-bnt'>\r\n                                <Button\r\n                                        onClick={this.addQuestionHandler}\r\n                                        disabled={!this.state.isFormValid}>\r\n                                    Добавить вопрос\r\n                                </Button>\r\n\r\n                                <Button type=\"primary\"\r\n                                        onClick={this.createQuizHandler}\r\n                                        disabled={this.state.quiz.length === 0}>\r\n                                    Создать тест\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    </BlockAuth>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuizCreator;","import React, {Component} from 'react';\r\nimport {Switch, Route, BrowserRouter, withRouter, HashRouter} from 'react-router-dom';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {compose} from \"redux\";\r\n\r\nimport store from \"./redux/redux-store\";\r\nimport {getProfileFetch, logoutUser} from './redux/actions/actions';\r\nimport Auth from './pages/Auth/Auth';\r\nimport Home from \"./pages/Home/Home\";\r\nimport QuizCreator from \"./containers/QuizCreator/QuizCreator\";\r\n\r\nclass App extends Component {\r\n    componentDidMount = () => {\r\n        //this.props.getProfileFetch()\r\n    }\r\n\r\n    handleClick = event => {\r\n        event.preventDefault()\r\n        localStorage.removeItem(\"token\")\r\n        this.props.logoutUser()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'wrapper'}>\r\n                <Switch>\r\n                    <Route exact path={[\"/\", \"/login\", \"/signup\"]} render={() => <Auth/>}/>\r\n                    <Route exact path='/quiz-creator' render={() => <QuizCreator/>}/>\r\n                    <Route exact path=\"/im\" render={() => <Home/>}/>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    //currentUser: state.auth.currentUser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    //getProfileFetch: () => dispatch(getProfileFetch()),\r\n    //logoutUser: () => dispatch(logoutUser())\r\n})\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps))(App);\r\n\r\nconst MainApp = (props) => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default MainApp;\r\n\r\n//basename={process.env.PUBLIC_URL}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}